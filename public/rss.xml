<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Frainer's Blog üìù]]></title>
        <description><![CDATA[Recent articles from Frainer's Blog. I write about tech, programming and whatever else I'm thinking about!]]></description>
        <link>http://localhost:3000/</link>
        <image>
            <url>http://localhost:3000/og.webp</url>
            <title>Frainer&apos;s Blog üìù</title>
            <link>http://localhost:3000/</link>
        </image>
        <generator>RSS for Node</generator>
        <lastBuildDate>Sat, 20 Jan 2024 21:32:41 GMT</lastBuildDate>
        <atom:link href="http://localhost:3000/rss.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Thu, 18 Jan 2024 00:00:00 GMT</pubDate>
        <language><![CDATA[en-US]]></language>
        <category><![CDATA[tech]]></category>
        <category><![CDATA[programming]]></category>
        <category><![CDATA[software]]></category>
        <dc:creator>Frainer Encarnaci√≥n</dc:creator>
        <item>
            <title><![CDATA[Mastering Git Commit Messages for Excellence]]></title>
            <description><![CDATA[In this post, I'll show you how to improve your Git commit messages using industry best practices, with the goal of ensuring a clear and easily readable Git history for your projects.]]></description>
            <link>http://localhost:3000/mastering-git-commit-messages</link>
            <guid isPermaLink="false">http://localhost:3000/mastering-git-commit-messages</guid>
            <category><![CDATA[git]]></category>
            <category><![CDATA[terminal]]></category>
            <dc:creator><![CDATA[Frainer Encarnaci√≥n]]></dc:creator>
            <pubDate>Sat, 20 Jan 2024 00:00:00 GMT</pubDate>
            <enclosure url="http://localhost:3000/images/posts/cover/master-git-commit-message.webp" length="0" type="image/webp"/>
            <content:encoded>&lt;p&gt;In this post, I&amp;#39;ll show you how to improve your Git commit messages using industry best practices, aiming to ensure a clear and easily readable Git history for your projects.&lt;/p&gt;
&lt;h2&gt;üß† Understanding Git Commits&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;commit&lt;/code&gt; in Git captures a set of changes stored in a project&amp;#39;s history, representing a logical unit of work. Commits are pivotal for version control, fostering effective collaboration among developers, organizing update records, and enabling easy rollback to previous versions.&lt;/p&gt;
&lt;h3&gt;Commit Structure&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Basic:&lt;/strong&gt; &lt;code&gt;git commit -m &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Detailed:&lt;/strong&gt; &lt;code&gt;git commit -m &amp;lt;title&amp;gt; -m &amp;lt;description&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add .
$ git commit -m &amp;quot;Implement user sign-in feature&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;This article assumes you already understand basic Git workflow. If not, I suggest reading through the¬†&lt;a href=&quot;https://guides.github.com/introduction/git-handbook/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Git Handbook&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;üåü &lt;strong&gt;The Importance of Well-Crafted Commit Messages&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Commits are not just snapshots of code changes; they serve as a roadmap for your project&amp;#39;s history. A poorly written commit message can lead to confusion, making it challenging to understand the context of changes. Let&amp;#39;s explore why crafting meaningful commit messages matters.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/content/git-commit.webp&quot; alt=&quot;Example of wrong commit messages&quot;&gt;&lt;br&gt;&lt;em&gt;Source: &lt;a href=&quot;http://xkcd.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;xkcd.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Think of your commit messages as letters to your future self or collaborators. By investing time in writing informative messages, you create a documentation trail that can save hours of troubleshooting and enhance project maintenance, especially in large-scale projects.&lt;/p&gt;
&lt;h2&gt;ü§î &lt;strong&gt;Why Commit Message Quality Matters&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I challenge you to review old commit messages in your projects using &lt;code&gt;git log&lt;/code&gt;. You may encounter unclear messages that provide little insight into the changes made. Without proper documentation, you might find yourself pondering over the purpose of certain code lines.&lt;/p&gt;
&lt;p&gt;By adhering to good commit practices, you future-proof your work. Clear messages become a valuable asset during collaborative efforts, fostering better communication within engineering teams.&lt;/p&gt;
&lt;h2&gt;üé¨ &lt;strong&gt;6 Rules for Crafting Exceptional Commit Messages&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;There are 6 simple rules that will help maintain consistency, clarity, and effectiveness in your commit messages, improving communication within the development team and facilitating code history tracking. These rules are:&lt;/p&gt;
&lt;h3&gt;1. Use Imperative Mood in the Subject Line&lt;/h3&gt;
&lt;p&gt;When crafting a commit message, use the imperative mood in the subject line to convey the action taken. For example, instead of saying &amp;quot;Added feature,&amp;quot; use &amp;quot;Add feature&amp;quot; or &amp;quot;Fix bug&amp;quot; rather than &amp;quot;Fixed bug.&amp;quot; This provides a clear instruction on the intended state change.&lt;/p&gt;
&lt;p&gt;To come up with thoughtful commits, consider the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why have I made these changes?&lt;/li&gt;
&lt;li&gt;What effect have my changes made?&lt;/li&gt;
&lt;li&gt;Why was the change needed?&lt;/li&gt;
&lt;li&gt;What are the changes in reference to?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The answer will be something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;- Add the new login page
- Fix a problem with the feed of the blog
- Change the main font family to Inter
- Remove a random article
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;2. Avoid Periods and Ellipses in Commit Messages&lt;/h3&gt;
&lt;p&gt;Refrain from using unnecessary punctuation in commit messages. The first line of a commit serves as the title and should not end with a period. Additionally, ellipses should be avoided for clear and concise instructions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git commit -m &amp;quot;Add the new login page.&amp;quot; # ‚ùå
git commit -m &amp;quot;Add the new login page...&amp;quot; # ‚ùå
git commit -m &amp;quot;Add the new login page&amp;quot; # ‚úÖ
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;3. Keep the Subject Line Under 50 Characters&lt;/h3&gt;
&lt;p&gt;Be brief and to the point. If your commit message is too lengthy, consider breaking it down into multiple commits. Ensure that the subject line accurately reflects the changes made.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git commit -m &amp;quot;Add the article &amp;#39;How to install Bun on Windows&amp;#39; and update the blog&amp;#39;s description in the home page&amp;quot; # ‚ùå
git commit -m &amp;quot;Add the article &amp;#39;How to install Bun on Windows&amp;#39;&amp;quot; # ‚úÖ
git commit -m &amp;quot;Update the blog&amp;#39;s description in the home page&amp;quot; # ‚úÖ
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;4. Provide Necessary Context in the Commit Body&lt;/h3&gt;
&lt;p&gt;When additional context is required, use the commit body instead of overcrowding the subject line. This can be achieved by using &lt;code&gt;git commit&lt;/code&gt; without the &lt;code&gt;-m&lt;/code&gt; flag.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Example
git commit fix: prevent racing of requests

Introduce a request id and a reference to latest request. Dismiss
incoming responses other than from latest request.

Remove timeouts which were used to mitigate the racing issue but are
obsolete now.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember that the first commit message line serves as the title, while subsequent lines form the body and should adhere to standard punctuation rules.&lt;/p&gt;
&lt;h3&gt;5. Use Prefixes for Semantic Commits&lt;/h3&gt;
&lt;p&gt;As your project grows, maintaining a readable history becomes crucial. To achieve this, you can add a prefix to give more meaning to the commits you make. This is called semantic commits and is done as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;lt;type&amp;gt;[optional scope]: &amp;lt;description&amp;gt;

[optional body]

[optional footer(s)]

# Example:
fix: resolve login authentication bug
^-^  ^------------------------------^
‚îÇ     ‚îÇ
‚îÇ     ‚îî--&amp;gt; # Description of the changes
‚îÇ
‚îî‚îÄ‚îÄ------&amp;gt; # Type of change

[optional body]
- Improved authentication logic to handle edge cases.
- Updated relevant unit tests.

[optional footer(s)]
Reviewed-by: Z
Refs: #123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;monorepositories&lt;/code&gt; with multiple packages, you can also add information about the package affected by the commit. This is known as scope and would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;feat(backend): add a new table for the likes
fix(web): update the main font family to Inter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The commit type can include the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feat&lt;/code&gt;¬†‚Äì a new feature is introduced with the changes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fix&lt;/code&gt;¬†‚Äì a bug fix has occurred&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chore&lt;/code&gt;¬†‚Äì changes that do not relate to a fix or feature and don&amp;#39;t modify src or test files (for example updating dependencies)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;refactor&lt;/code&gt;¬†‚Äì refactored code that neither fixes a bug nor adds a feature&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docs&lt;/code&gt;¬†‚Äì updates to documentation such as a the README or other markdown files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;style&lt;/code&gt;¬†‚Äì changes that do not affect the meaning of the code, likely related to code formatting such as white-space, missing semi-colons, and so on.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt;¬†‚Äì including new or correcting previous tests&lt;/li&gt;
&lt;li&gt;&lt;code&gt;perf&lt;/code&gt;¬†‚Äì performance improvements&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ci&lt;/code&gt;¬†‚Äì continuous integration related&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt;¬†‚Äì changes that affect the build system or external dependencies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;revert&lt;/code&gt;¬†‚Äì reverts a previous commit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The commit type subject line should be all lowercase with a character limit to encourage succinct descriptions.&lt;/p&gt;
&lt;p&gt;The optional commit body should be used to provide further detail that cannot fit within the character limitations of the subject line description.&lt;/p&gt;
&lt;p&gt;It is also a good location to utilize¬†&lt;code&gt;BREAKING CHANGE: &amp;lt;description&amp;gt;&lt;/code&gt;¬†to note the reason for a breaking change within the commit.&lt;/p&gt;
&lt;h3&gt;6. Consider Using Commit Utilities&lt;/h3&gt;
&lt;p&gt;Enhance your commit workflow by incorporating tools like &lt;code&gt;husky&lt;/code&gt; for executing scripts before specific Git actions and &lt;code&gt;commitlint&lt;/code&gt; to ensure commits follow a chosen convention. These utilities contribute to a more streamlined and standardized commit process.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install husky -D
npx husky install
npm set-script prepare &amp;quot;husky install&amp;quot;
npm run prepare
npx husky add .husky/pre-push &amp;quot;npm test&amp;quot;
git add .husky/pre-push

git commit -m &amp;quot;Keep calm and commit&amp;quot;
git push -u origin master *# tests run before the push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;commitlint&lt;/code&gt;, you can enforce semantic, readable commits that adhere to predefined conventions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 1. Install commitlint cli and conventional config

# For Mac and Linux:
npm install --save-dev @commitlint/{config-conventional,cli}
# For Windows:
npm install --save-dev @commitlint/config-conventional @commitlint/cli

# 2. Add hoook to check out the commit message
npx husky add .husky/commit-msg &amp;#39;npx --no-install commitlint --edit &amp;quot;$1&amp;quot;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These tools, combined with practices like &lt;code&gt;conventional-changelog&lt;/code&gt; and &lt;code&gt;commitizen&lt;/code&gt;, contribute to an efficient and standardized commit workflow, ultimately improving project maintainability and collaboration.&lt;/p&gt;
&lt;p&gt;By incorporating these rules and tools into your Git workflow, you&amp;#39;ll contribute to a more readable and organized project history, making it easier for you and your collaborators to navigate and understand the changes made over time. Happy committing! üöÄ&lt;/p&gt;
&lt;h2&gt;üåê Additional Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.conventionalcommits.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Conventional Commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://semver.org&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Semantic Versioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freecodecamp.org/news/how-to-write-better-git-commit-messages&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;freeCodeCamp.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        </item>
        <item>
            <title><![CDATA[How to Install Multiple Versions of Node.js with NVM]]></title>
            <description><![CDATA[In this article, I'll explain how you can install and manage multiple versions of Node.js using Node Version Manager (NVM) on Windows, Linux, and Mac.]]></description>
            <link>http://localhost:3000/how-to-install-multiple-versions-nodejs-nvm</link>
            <guid isPermaLink="false">http://localhost:3000/how-to-install-multiple-versions-nodejs-nvm</guid>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[nodejs]]></category>
            <category><![CDATA[terminal]]></category>
            <dc:creator><![CDATA[Frainer Encarnaci√≥n]]></dc:creator>
            <pubDate>Thu, 18 Jan 2024 00:00:00 GMT</pubDate>
            <enclosure url="http://localhost:3000/images/posts/cover/how-to-install-nvm.webp" length="0" type="image/webp"/>
            <content:encoded>&lt;p&gt;In this article, I&amp;#39;ll explain how you can install and manage multiple versions of Node.js with Node Version Manager (NVM) on Windows, Linux, and Mac and easily switch between them with a single command.&lt;/p&gt;
&lt;h2&gt;ü§î What is NVM?&lt;/h2&gt;
&lt;p&gt;Node Version Manager (NVM), as the name implies, is a tool for managing Node versions on your device.&lt;/p&gt;
&lt;p&gt;Different projects on your device may be using different versions of Node. Using only one version (the one installed by &lt;code&gt;npm&lt;/code&gt;) for these different projects may not give you accurate execution results.&lt;/p&gt;
&lt;p&gt;For example, if you use a Node version of &lt;strong&gt;18.0.0&lt;/strong&gt; for a project that uses &lt;strong&gt;20.0.0&lt;/strong&gt;, you may get some errors. And if you update the Node version to &lt;strong&gt;20.0.0&lt;/strong&gt; with npm and use it for a project that uses &lt;strong&gt;18.0.0&lt;/strong&gt;, you may not get the expected experience.&lt;/p&gt;
&lt;p&gt;In fact, you would most likely get a warning that says:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;This project requires Node version X
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of using npm to install and uninstall Node versions for your different projects, you can use &lt;strong&gt;nvm&lt;/strong&gt;, which helps you effectively manage your node versions for each project.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nvm-sh/nvm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NVM&lt;/a&gt; allows you to install different versions of Node and switch between these versions depending on the project that you&amp;#39;re working on via the command line.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; This guide assumes that you don&amp;#39;t have a previous installation of &lt;code&gt;Node.js&lt;/code&gt;. If you do, it might cause issues and conflicts. Before proceeding, make sure you have uninstalled any previous installations of &lt;code&gt;Node.js&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;üêß How to Install NVM on Mac, Linux or Windows WSL&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This would be the recommended method if your operating system is based on UNIX&lt;/strong&gt; (like Mac, Linux, or Windows WSL), as it offers various advantages, such as handling different versions of Node simultaneously.&lt;/p&gt;
&lt;h3&gt;1. Run the nvm installer&lt;/h3&gt;
&lt;p&gt;To install and update &lt;em&gt;nvm&lt;/em&gt;, you need to execute the installation script. You can download and run the code from the terminal using the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl -o- &amp;lt;https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh&amp;gt; | bash

# or

wget -qO- &amp;lt;https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh&amp;gt; | bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;bash&lt;/code&gt; depending on the command available on your device.&lt;/p&gt;
&lt;p&gt;This script will clone the &lt;a href=&quot;https://github.com/nvm-sh/nvm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;nvm repository&lt;/a&gt; into the &lt;code&gt;~/.nvm&lt;/code&gt; directory and attempt to add the execution lines depending on your terminal language (&lt;code&gt;~/.bash_profile&lt;/code&gt;, &lt;code&gt;~/.zshrc&lt;/code&gt;, &lt;code&gt;~/.profile&lt;/code&gt;, or &lt;code&gt;~/.bashrc&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;2. Update your profile configuration&lt;/h3&gt;
&lt;p&gt;In case it wasn&amp;#39;t possible for some reason, it might ask you to manually add the code lines. &lt;strong&gt;This is only necessary if it couldn&amp;#39;t be done automatically.&lt;/strong&gt; The lines to add would be these:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;export NVM_DIR=&amp;quot;$([ -z &amp;quot;${XDG_CONFIG_HOME-}&amp;quot; ] &amp;amp;&amp;amp; printf %s &amp;quot;${HOME}/.nvm&amp;quot; || printf %s &amp;quot;${XDG_CONFIG_HOME}/nvm&amp;quot;)&amp;quot;
[ -s &amp;quot;$NVM_DIR/nvm.sh&amp;quot; ] &amp;amp;&amp;amp; \\\\. &amp;quot;$NVM_DIR/nvm.sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After doing this, you may need to restart the terminal or open a new tab to use the &lt;code&gt;nvm&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;This command above loads nvm for use.&lt;/p&gt;
&lt;h3&gt;3. Reload the shell configuration&lt;/h3&gt;
&lt;p&gt;With your profile configuration updated, now you will reload the configuration for your terminal to use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this command executed, nvm is ready for you to use. You can confirm that nvm is installed correctly by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nvm -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should show the version of nvm installed.&lt;/p&gt;
&lt;h2&gt;ü™ü How to Install NVM on Windows&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;nvm-windows&lt;/code&gt;, although sharing the name with &lt;code&gt;nvm&lt;/code&gt;, is not from the same creators and, therefore, has some differences. And among those differences is, of course, the way to install it. For &lt;code&gt;nvm-windows&lt;/code&gt;, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the &lt;a href=&quot;https://github.com/coreybutler/nvm-windows/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;nvm-windows releases section&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Download and run the &lt;code&gt;nvm-setup.exe&lt;/code&gt; file from the latest available release.&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;nvm-setup.exe&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Follow the guided package installation steps and choose the desired configuration.&lt;/li&gt;
&lt;li&gt;Once completed, open a &lt;code&gt;PowerShell&lt;/code&gt; terminal and run:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When done, you can confirm that nvm has been installed by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nvm -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If nvm was installed correctly, this command will show you the nvm version installed.&lt;/p&gt;
&lt;p&gt;And with this, we are ready to work with &lt;code&gt;nvm-windows&lt;/code&gt;. If you encounter any issues, you can &lt;strong&gt;check the &lt;a href=&quot;https://github.com/coreybutler/nvm-windows/wiki/Common-Issues&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Common Issues section of the repository&lt;/a&gt; to see if your problem has a solution.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;üïπÔ∏è How NVM Works?&lt;/h2&gt;
&lt;p&gt;With nvm installed, you can now install, uninstall, and switch between different Node versions on your Windows, Linux, or Mac device.&lt;/p&gt;
&lt;p&gt;You can install Node versions like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nvm install --lts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will install the &lt;strong&gt;long-term support version of Node&lt;/strong&gt;. Currently, it is version 20, but in the future, it will be 22 and so on.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LTS or long-term support means that it is a version that will receive support for a longer period than other versions. Generally, it is up to 30 months of support for critical errors. If you are going to use Node in production, it&amp;#39;s best to use only LTS versions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you prefer, you can also install a specific version either by indicating the major or directly the exact version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nvm install 21 # this will install the latest version 21 of Node.js
nvm install 12.6.0 # this will install exactly version 21.6.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;üöÄ Using a Node.js Version With NVM&lt;/h2&gt;
&lt;p&gt;Sometimes you may have more than one installed version of Node.js on your user. To see all the versions of Node.js you have installed, you can use the &lt;code&gt;nvm ls&lt;/code&gt; command. To see the versions available for installation, you have to use &lt;code&gt;nvm ls-remote&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you have more than one on your system, you&amp;#39;ll want to switch between those versions. To do this, run &lt;code&gt;nvm use &amp;lt;version-you-want-to-use&amp;gt;&lt;/code&gt; for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nvm use 20
nvm use 21
nvm use --lts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want one of these to be your default version, so that it is used the next time you open a tab, you have to create an alias for that version called &lt;code&gt;default&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, let&amp;#39;s say you have version 16 and 18 installed, and now you install version 20, and you want this to be the default version from now on. You should do the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nvm install 20
nvm alias default 20
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;The first time you run &lt;code&gt;nvm install&lt;/code&gt;, it will make that version the default.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;‚ö†Ô∏è Possible Problems&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;On Mac, you&amp;#39;ll need to have Xcode development tools installed. When you run the &lt;code&gt;nvm&lt;/code&gt; installation script for the first time, a window may appear asking you to do this. Once installed, try installing &lt;code&gt;nvm&lt;/code&gt; again with the same script as before.&lt;/li&gt;
&lt;li&gt;Remember, as I mentioned, after the installation, you may need to restart the terminal or create a new tab before you can run the &lt;code&gt;nvm&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;If you have any further issues, you can check the &lt;a href=&quot;https://github.com/nvm-sh/nvm#troubleshooting-on-linux&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Troubleshooting on Linux section in the nvm repository.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
        </item>
    </channel>
</rss>